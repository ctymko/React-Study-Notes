
React is a Javascript library for building user interfaces

Complex UI structures can be broken down into a component tree

Each component has its own styling and functionality that it controls and can talk to the server independently 

re-renders components by doing a dif with the old version and updates changes to only the newly changed components - provides for great performance.

Basic setup of index.html

    <body>
        <div id="root"></div>
        <script src="../src/index.js" type="text/JSX"></script>
        </body>
    </html>


All code is written in index.js

Dependencies are required inside the files that use them.

    var React = require("react");
    var ReactDom = require("react-dom");

    ReactDom.render(What to show, Where to Show);

    ReactDom.render(<h1>Hello Buddy!</h1>, document.getElementById("root"));

By using JSX you can insert HTML into Javascript.

React compiles the HTML rather than having to write it out in the HTML file
 
!!! ATTENTION
    Babel is a Javascript compiler -  It can take nehttps://proforums.harman.com/soundcraft/discussion/137176/how-to-connect-external-effect-to-soundcraft-signature-12xt generation Javascript and compile it down to a version that every brower can use

So we can use latest JS to import dependencies rather than using require and a variable

    import React from "react";
    import ReactDom from "react-dom";

ReactDom.render will only render a single HTML element so it needs to be wrapped in a DIV 

    ReactDom.render(
      <div>
        <h1>Hello Buddy!</h1>
        <p> How the heck is it going?</p>
      </div>,
      document.getElementById("root"));

use {} to insert javascript inside an HTML element using ReactDOM.render

	const fName = "Chadwick";
	const lName = "Tymko";
	const num = 18;

	ReactDOM.render(
	  <div>
	    <h1>Hello {fName + " " + lName}!</h1>
	    <p>Your lucky number is {num}</p>
	  </div>,
	  document.getElementById("root")
	);

Template Literals - ES6 - Code above is probably easier to read and cleaner though
    {`${fName} ${lName}`}
    
    
Use className instead of class for styling in JSX files

Use Javascript style camel casing for HTML attributes

Can you type on multiple lines in VScode?

A closing / is required for HTML elements like img in JSX
`<img alt="random" src={img + "?grayscale"} />`

Inline style element needs to reference a javascript object. Sometimes useful when wanting to update styles on the fly.

CSS properties need to be camel case rather than kebab case for use in the Javascript customStyle object in JSX.

    const customStyle = {
      color: "red",
      fontSize: "20px",
      border: "1px solid black"
    };

    customStyle.color = "blue";

    ReactDOM.render(
      <h1 style={customStyle}>Hello World!</h1>,
      document.getElementById("root")
    );





Components allow you to split up a complex web structure into smaller components which are reusable

Component names are in pascal case -  Capital letter first

https://github.com/airbnb/javascript/tree/master/react

Create seperate file for a component and then import it into index.js for example

Components are saved as a .jsx file usually in a components folder as best practice.

Index.js should reference a component named App.jsx rather than containing any HTML elements or custom code.


Index.js

    import React from "react";
    import ReactDOM from "react-dom";
    import App from "./components/App";

    ReactDOM.render(<App />, document.getElementById("root"));


components/Heading.jsx

    import React from "react";

    function Heading() {
      return <h1>My Favourite Foods</h1>;
    }

    export default Heading;


components/App.jsx

    import React from "react";
    import Heading from "./Heading";

    function App() {
      return (
        <div>
          <Heading />
        </div>
      );
    }

    export default App;



Import, Export and Modules:

You can export a default item from a module as well as additional items

The default export can have any name when importing. Additional exports need to be imported using their specific names

You can import mutliples items from a module

* can be used with import rather then declaring each exported item but is discourged you should rather import just what you are using.


math.js:

    const pi = 3.1415962;

    function doublePi() {
      return pi * 2;
    }

    function triplePi() {
      return pi * 3;
    }

    export default pi;
    export { doublePi, triplePi };


index.js

    import React from "react";
    import ReactDOM from "react-dom";
    import pi, { doublePi, triplePi } from "./math.js";

    ReactDOM.render(
      <ul>
        <li>{pi}</li>
        <li>{doublePi()}</li>
        <li>{triplePi()}</li>
      </ul>,
      document.getElementById("root")
    );

Props

Props are arguments passed into React components.

Props are passed to components via HTML attributes.


Add a "brand" attribute to the Car element:

    const myElement = <Car brand="Ford" />;

Use the brand attribute in the component:

    function Car(props) {
        return <h2>I am a { props.brand }!</h2>;
    }

Props Examples:

App.jsx:

    import React from "react";
    import Card from "./Card";
    import contacts from "../contacts";

    function App() {
      return (
        <div>
          <h1 className="heading">My Contacts</h1>
          <Card
            name={contacts[0].name}
            img={contacts[0].imgURL}
            tel={contacts[0].phone}
            email={contacts[0].email}
          />
          <Card
            name={contacts[1].name}
            img={contacts[1].imgURL}
            tel={contacts[1].phone}
            email={contacts[1].email}
          />
          <Card
            name={contacts[2].name}
            img={contacts[2].imgURL}
            tel={contacts[2].phone}
            email={contacts[2].email}
          />
        </div>
      );
    }

    export default App;

Card.jsx

    import React from "react";

    function Card(props) {
      return (
        <div className="card">
          <div className="top">
            <h2 className="name">{props.name}</h2>
            <img className="circle-img" src={props.img} alt="avatar_img" />
          </div>
          <div className="bottom">
            <p className="info">{props.tel}</p>
            <p className="info">{props.email}</p>
          </div>
        </div>
      );
    }

    export default Card;

Contacts.js

    const contacts = [
      {
        name: "Bob Barker",
        imgURL:
          "https://files.files.wordpress.com/2010/02/picture-device-independent-bitmap-119.jpg",
        phone: "+123 456 789",
        email: "b@barker.com"
      },
      {
        name: "Al Chappers",
        imgURL:
          "https://pbs.twimg.com/profile_images/625247595825246208/X3XLea04_400x400.jpg",
        phone: "+987 654 321",
        email: "al@cte.com"
      },
      {
        name: "Chuck Norris",
        imgURL:
          "https://i.pinimg.com/originals/e3/94/47/e39447de921955826b1e498ccf9a39af.png",
        phone: "+918 372 574",
        email: "gmail@chucknorris.com"
      }
    ];

    export default contacts;

Mapping Components:

App.jsx

    import React from "react";
    import Card from "./Card";
    import contacts from "../contacts";

    function createCard(contact) {
      return (
        <Card
          key={contact.id}
          name={contact.name}
          img={contact.imgURL}
          tel={contact.phone}
          email={contact.email}
        />
      );
    }

    function App() {
      return (
        <div>
          <h1 className="heading">My Contacts</h1>
          {contacts.map(createCard)}
      );
    }

    export default App;


Map / Filter/ Reduce:


Map -Create a new array by doing something with each item in an array.

    var numbers = [3, 56, 2, 48, 5];

    function double(x) {
      return x * 2;
    }
    const newNumbers = numbers.map(double);

    var newNumbers = [];
    numbers.forEach(function (x) {
      newNumbers.push(x * 2);
    });

    const newNumbers = numbers.map(function (x) {
      return x * 2;
    });

    console.log(newNumbers);

Filter - Create a new array by keeping the items that return true.

    var numbers = [3, 56, 2, 48, 5];

    const newNumbers = numbers.filter(function(num) {
      return num < 10;
    });

    var newNumbers = [];
    numbers.forEach(function(num) {
      if (num < 10) {
        newNumbers.push(num);
      }
    })

Reduce - Accumulate a value by doing something to each item in an array.

    var numbers = [3, 56, 2, 48, 5];

    var newNumber = numbers.reduce(function (accumulator, currentNumber) {
      console.log("accumulator = " + accumulator);
      console.log("currentNumber = " + currentNumber);
        return accumulator + currentNumber;
    })

    var newNumber = 0;
    numbers.forEach(function (currentNumber) {
      newNumber += currentNumber
    })

Find - find the first item that matches from an array.

    var numbers = [3, 56, 2, 48, 5];

    const newNumber = numbers.find(function (num) {
      return num > 10;
    })

    console.log(newNumber);

FindIndex - find the index of the first item that matches.

    var numbers = [3, 56, 2, 48, 5];

    const newNumber = numbers.findIndex(function (num) {
      return num > 10;
    })

    console.log(newNumber);


Arrow Functions:

Map -Create a new array by doing something with each item in an array.

    var numbers = [3, 56, 2, 48, 5];

    const newNumbers = numbers.map( x => x * 2);

Filter - Create a new array by keeping the items that return true.

    var numbers = [3, 56, 2, 48, 5];

    const newNumbers = numbers.filter(num => num < 10);

Reduce - Accumulate a value by doing something to each item in an array.

    var numbers = [3, 56, 2, 48, 5];

    const newNumber = numbers.reduce((accumulator, currentNumber) => accumulator + currentNumber);

Find - find the first item that matches from an array.

    var numbers = [3, 56, 2, 48, 5];

    const newNumber = numbers.find(num => num > 10);

FindIndex - find the index of the first item that matches.

    var numbers = [3, 56, 2, 48, 5];

    const newNumber = numbers.findIndex(num => num > 10);

Arrow Function when calling Component with props (App.jsx):

    import React from "react";
    import Entry from "./Entry";
    import emojipedia from "../emojipedia";

    function App() {
      return (
        <div>
          <h1>
            <span>emojipedia</span>
          </h1>
          <dl className="dictionary">
            {emojipedia.map(emojiTerm => (
              <Entry
                key={emojiTerm.id}
                emoji={emojiTerm.emoji}
                name={emojiTerm.name}
                description={emojiTerm.meaning}
              />
            ))}
          </dl>
        </div>
      );
    }

    export default App;    


Conditional Rendering with the Ternary Operator & AND Operator:

App.jsx

    import React from "react";
    import Login from "./Login";

    var isLoggedIn = false;

    const currentTime = new Date(2019, 11, 1, 9).getHours();
    console.log(currentTime);

    function App() {
      return (
        <div className="container">
          {/*Ternary Operator*/}
          {isLoggedIn ? <h1>Hello</h1> : <Login />}
          {/*AND Operator*/}
          {currentTime > 12 && <h1>Why are you still working?</h1>}
        </div>
      );
    }

    export default App;

Input.jsx

    import React from "react";

    function Input(props) {
      return <input type={props.type} placeholder={props.placeholder} />;
    }

    export default Input;

Login.jsx

    import React from "react";
    import Input from "./Input";

    function Login() {
      return (
        <form className="form">
          <Input type="text" placeholder="Username" />
          <Input type="password" placeholder="Password" />
          <button type="submit">Login</button>
        </form>
      );
    }

    export default Login;

State in React - Declarative vs. Imperative Programming:

Imperative Programming as the name suggests is a type of programming paradigm that describes how the program executes. Developers are more concerned with how to get an answer step by step. It comprises the sequence of command imperatives. In this, the order of execution is very important and uses both mutable and immutable data. Fortran, Java, C, C++ programming languages are examples of imperative programming. 

Declarative Programming as the name suggests is a type of programming paradigm that describes what programs to be executed. Developers are more concerned with the answer that is received. It declares what kind of results we want and leave programming language aside focusing on simply figuring out how to produce them. In simple words, it mainly focuses on end result. It expresses the logic of computation. Miranda, Erlang, 
Haskell, Prolog are a few popular examples of declarative programming.


React Hooks - useState

https://legacy.reactjs.org/docs/hooks-state.html

Hooks must be used inside a functional component.


    import React, { useState } from "react";

    function App() {
      const [count, setCount] = useState(0);

      function increase() {
        setCount(count + 1);
      }

      function decrease() {
        setCount(count - 1);
      }

      return (
        <div className="container">
          <h1>{count}</h1>
          <button onClick={decrease}>-</button>
          <button onClick={increase}>+</button>
        </div>
      );
    }

    export default App;


Javascript ES6 Object & Array Destructuring


Practice.js

    const cars = [
      {
        model: "Honda Civic",
        coloursByPopularity: ["black", "silver"],
        speedStats: {
          topSpeed: 140,
          zeroToSixty: 8.5
        }
      },
      {
        model: "Tesla Model 3",
        coloursByPopularity: ["red", "white"],
        speedStats: {
          topSpeed: 150,
          zeroToSixty: 3.2
        }
      }
    ];

    export default cars;

Index.js

    import React from "react";
    import ReactDOM from "react-dom";
    import cars from "./practice";

    const [honda, tesla] = cars;

    const { speedStats: { topSpeed: hondaTopSpeed } } = honda;
    const { speedStats: { topSpeed: teslaTopSpeed } } = tesla;

    const {coloursByPopularity: [hondaTopColour]} = honda;
    const {coloursByPopularity: [teslaTopColour]} = tesla;

    ReactDOM.render(
      <table>
        <tr>
          <th>Brand</th>
          <th>Top Speed</th>
          <th>Top Colour</th>
        </tr>
        <tr>
          <td>{tesla.model}</td>
          <td>{teslaTopSpeed}</td>
          <td>{teslaTopColour}</td>
        </tr>
        <tr>
          <td>{honda.model}</td>
          <td>{hondaTopSpeed}</td>
          <td>{hondaTopColour}</td>
        </tr>
      </table>,
      document.getElementById("root")
    );


Event Handling in React:

App.jsx

    import React, { useState } from "react";

    function App() {
      const [headingText, setHeadingText] = useState("Hello");
      const [isMousedOver, setMouseOver] = useState(false);

      function handleClick() {
        setHeadingText("Submitted");
      }

      function handleMouseOver() {
        setMouseOver(true);
      }

      function handleMouseOut() {
        setMouseOver(false);
      }

      return (
        <div className="container">
          <h1>{headingText}</h1>
          <input type="text" placeholder="What's your name?" />
          <button
            style={{ backgroundColor: isMousedOver ? "black" : "white" }}
            onClick={handleClick}
            onMouseOver={handleMouseOver}
            onMouseOut={handleMouseOut}
          >
            Submit
          </button>
        </div>
      );
    }

    export default App;


React Forms:

Handle default submit and postback of form with event.preventDefault();

App.jsx


    import React, { useState } from "react";

    function App() {
      const [name, setName] = useState("");
      const [headingText, setHeading] = useState("");

      function handleChange(event) {
        console.log(event.target.value);
        setName(event.target.value);
      }

      function handleClick(event) {
        setHeading(name);

        event.preventDefault();
      }

      return (
        <div className="container">
          <h1>Hello {headingText}</h1>
          <form onSubmit={handleClick}>
            <input
              onChange={handleChange}
              type="text"
              placeholder="What's your name?"
              value={name}
            />
            <button type="submit">Submit</button>
          </form>
        </div>
      );
    }

    export default App;






____

Windows setup and installation

----

node --version

go to node website and download the latest version

npx create-react-app my-app
cd my-app
npm start

npm install --run in folder of existing code to init

https://reactjs.org/docs/create-a-new-react-app.html#create-react-app



Do the keeper App challenges for best practice 




Pine, Fir, Spruce